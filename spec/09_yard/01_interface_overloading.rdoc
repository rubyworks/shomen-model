== YARD Method Signature Overloading

YARD supports the `@overload` tag for defining "virtual" method interfaces.
Given a file +lib/example.rb+ containing a class with a documented method
using the overload tag:

  class ExampleClass
    # Example method using overload directive.
    #
    # @overload my_method(flazm, saszm)
    #   @param [String] flazm
    #   @param [String] saszm
    #
    # @overload my_method(bunny){ |ears| ... } -> true or false
    #   @param [String] bunny
    #
    def my_method(a1,a2=nil,&b)
    end
  end

Running the script through shomen via yard the signatures list should have
three entries, the literal interface and the two virtual interfaces.

  example = @shomen['ExampleClass#my_method']
  example['interfaces'].size  #=> 3

=== Literal Interface

Lets get a closer look at the last signature, which is alway the literal
interface.

  signature = example['interfaces'].last

The first signature should match the literal definition.

  signature['signature']  #=> 'my_method(a1,a2=nil,&b)'

And the arguments should be detailed as expected.

  signature['arguments'][0]['name']      #=> 'a1'
  signature['arguments'][0]['default']   #=> nil

  signature['arguments'][1]['name']      #=> 'a2'
  signature['arguments'][1]['default']   #=> 'nil'

As should the block argument.

  signature['block']['name']  #=> '&b'

=== Virtual Interface

The second and third signatures should conform to those given in
under the `:call-seq:` directive.

Lets get a closer look at the first of these.

  signature = example['interfaces'][0]

The signature should match the provided image.

  signature['signature']  #=> 'my_method(flazm, saszm)'

And the arguments should be detailed as expected.

  signature['arguments'][0]['name']      #=> 'flazm'
  signature['arguments'][0]['default']   #=> nil

  signature['arguments'][1]['name']      #=> 'saszm'
  signature['arguments'][1]['default']   #=> nil

This virtual signature does not specify a block so the block argument
should return `nil`.

  signature['block']  #=> nil

Now lets' look at the second virtual signature.

  signature = example['interfaces'][1]

The signature should match the provided image.

  signature['signature']  #=> 'my_method(bunny)'

And the arguments should be detailed as expected.

  signature['arguments'][0]['name']      #=> 'bunny'
  signature['arguments'][0]['default']   #=> nil

This virtual signature does specify a block, but not as an argument, but rather
as a representation the call arguments.

  signature['block']['image']  #=> '{ |ears| ... }'

This signature also give a returns description.

  signature['returns']  #=> 'true or false'

