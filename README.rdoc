= Shomen Documentation Specification

== Description

Shomen defines a standarard documentation model for Ruby scripts.
The specification is a flat mapping (no internal referencing) that can
be stored in either YAML or JSYNC format.

== Why?

By using this standard, documentation parsing system have a single output
target format to worry about. And documentation template systems have a single
standard input specificaton to use regardless of the parsing system that was
used.

== Design By Example

We will use the following script, which would be located at 'lib/musicstore/song.rb'
in a project, as an example to elucidate the specification.

  # song.rb (c) 2010 John Doe

  # Toplevel namespace for my MusicStore application.
  module MusicStore

    # Where to store music store's configuration.
    CONFIG_DIRECTORY = "~/.config/musicstore"

    # Overridable setting for configuration directory.
    def self.config_directory
      @@config_directory ||= CONFIG_DIRECTORY
    end

    # Common methods for MusicStore classes.
    module MusicMixin
    end

    # This is the Song class.
    class Song
      include MusicMixin

      # Returns a String of the artists name.
      def artist    
      end

      # Play the song.
      # 
      # seconds - number of seconds to playback
      #
      # Returns Integer of forked process id.
      def play(seconds=nil)
      end

    end

  end

== Types

The Shomen specification is a mapping of typed entries. The keys to the
mapping are uniqe identifiers.

=== Script Type

The +script+ type provides information about a ruby program _file_.

  "/musicstore/song.rb": {
      "!": "script",
      "name": "song.rb",
      "path": "musicstore",
      "header": "song.rb (c) 2010 John Doe",
      "footer": "",
      "requires": [],
      "constants": [],
      "modules": ["MusicStore"],
      "classes": [],
      "functions": [],
      "methods": []
  }

=== Module Type

The +module+ type describes a Ruby Module.

  "MusicStore": {
      "!": "module",
      "name": "MusicStore",
      "namespace": "",
      "includes": [],
      "extended": [],
      "comment": "Common methods for MusicStore classes.",
      "constants": ["CONFIG_DIRECTORY"],
      "modules": ["SongMixin"],
      "classes": ["Song"],
      "functions": [],
      "methods": []
  }

=== Class Type

The +class+ type describes a Ruby Class.

  "MusicStore::Song": {
      "!": "class",
      "name": "Song",
      "namespace": "MusicStore",
      "includes": ["SongMixin"],
      "extended": [],
      "comment": "This is the Song class.",
      "constants": [],
      "modules": [],
      "classes": [],
      "functions": [],
      "methods": ["artist", "play"]
  }

We left the +methods+ entry with an elipses as it would contain method-type
entries for each of it's two methods. An example of which you can see below.

=== Constant Type

The +constant+ type describes a constant.

  "MusicStore::CONFIG_DIRECTORY": {
      "!": "constant",
      "name": "CONFIG_DIRECTORY",
      "namespace": "MusicStore"
      "comment": "Where to store music store's configuration."
  }

=== Method Type

The +method+ type describes an instance method.

  "MusicStore::Song#play": {
      "!": "method",
      "name": "play",
      "namespace": "MusicStore::Song",
      "comment": "Play the song.",
      "access": public
      "interface": [
        'play(seconds=nil)'
      ],
      "arguments": [
        {
          "name": "seconds",
          "comment": "number of seconds to playback"
        }
      ]
      "returns": [
         {
           "type": "Integer",
           "comment": "forked process id"
         }
      ]
  }

=== Function Type

The +function+ type describes a class/module singleton method. The use of
the term "function" might seem an odd one, but it actually a term Matz has
used as a way to better conceptualize the character of class singleton
methods.

  "MusicStore::Song.config_directory": {
      "!": "function",
      "name": "config_directory",
      "namespace": "MusicStore",
      "comment": "Overridable setting for configuration directory.",
      "access": public
      "arguments": []
      "returns": [
         {
           "type": "String",
           "comment": "configuration directory"
         }
      ]
  }

== Fields

== name

Every entry type has a name field. This simply give the local name of
the entry.

== namepace

Every entry type, with the expection of +script+, has a +namespace+.
This gives the "nesting" of the entry within the code.

== comment

Every entry has a +comment+ field, which store the comment given just
before the actual code for the entry.

=== constants

Used by scripts, modules and classes, provides a list of constants
found within it's context (excluding modules and classes, though they
are technically constant references too).

=== modules

Used by scripts, modules and classes, provides a list of modules
found within it's context.

=== classes

Used by scripts, modules and classes, provides a list of classes
found within it's context.

=== methods

Used by scripts, modules and classes, provides a list of instance methods
found within it's context.

=== functions

Used by scripts, modules and classes, provides a list of class-singleton
methods found within it's context.

=== access

The +method+ and +function+ types have +access+ types which can either be
+public+, +protected+ or +private+.

=== literal_interface

The +literal_interface+ provides a literal image of a method's or function's
argument interace, e.g.

  'x(*args)'

=== interface

The +interface+ field provides a list of intendend interface for a
method or function, as a subset of the literal interface.

For example:

  def x(*args)
    opts = Hash === args.last ? args.pop : {}
    name = args.first
    ...
  end

Might document the interface as:

  'interface': [
    'x(name, opts={})'
  ]


=== arguments

The +arguments+ field is used by the +method+ and +function+ types to provide
details about interface arguments.

  'arguments': [
    { 
      'name': 'name',
      'comment': 'name of x'
    },
    {
      'name': 'opts',
      'comment': 'runtime options for x'
    }
  ]

=== parameters

The +parametes+ field is used by the +method+ and +function+ types to provide
details about an interface's named paraemters. For example in the above +x+
method, +opts+ is used for named parameters. If there are specifically recognized
options, the +parameters+ field can be used to descrip them.

  'parameters': [
    { 
      'name': 'foo',
      'comment': 'foo description',
      'for': 'opts'
    }
  ]

Notice that arguments and parameters do not have a direct linkage to the 
interface they describe. While techincally, we could make +arguments+ and 
+parameters+ a subfield of the +interface+ as a mapping, available documentation
tools do not typically provide means for describing that level of detail.
The use of unique argument names is generally sufficient to communicate the
relationship. The +parameters+ field provides the +for+ subfield as an option
to make that relationship clearer.

=== returns

The +returns+ field, used by the +method+ and +function+ type, is a sequence of
possible return values. Ususally there is only one return value, but it is 
possible for there to be multiple ruturn values based on conditions
within the method. For example, a method might return a filename if a file
exists, but +nil+ otherwise, in which case the +returns+ field might look like:

  'returns': [
    {
      'type': 'String'
      'comment': 'filename'
    },
    {
      'type': 'nil',
      'comment': 'if no file is found'
    }
  }


== Guidelines for Documentation Parsers


== Guidelines for Documentation Generators



